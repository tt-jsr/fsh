PipeLine - Execute a pipeline


Description
    PipeLine[head, stage, stage, ...];

    Construct an execution pipeline.

    PipeLine is the heart for interactive use of fsh. The head of
    the pipeline sources the data to be passed to subsequent stages. Each
    stage of the pipeline can filter, modify or pass on the data to the next stage.
    Each stage can also decide to abort the pipeline or restart it with the
    next data from the head. The following describes what kind of objects
    can be at the head, and subsequent stages.

    head
        The head of a pipline may be one of the following
        data types
        List
            Each item of the list is passed to the next stage

        Map
            The map is iterated and each Pair is passed to the next stage.

        FileHandle
            Lines are read from the handle and passed to the next stage.
            An exception will be thrown if it is not open for reading.

        All other types are converted to a string and a single item
        will be passed through the pipeline.

        See the Notes section for more about strings

    stage
        String
            The data from the previous is appended to the string. 
            The data is passed to the next stage.

        Function
            A function that takes a single argument is called with data from 
            the previous stage. The returned data will be passed on to the next stage.
            The function can also return PIPELINE_RESTART if the function does not
            want to pass the data (such as a filter or select function).
            PIPELINE_RESTART will cause the pipeline to go back to the head for the
            next data. The function can also return PIPELINE_EXIT to stop the pipeline.

        List
            Data from the prevous stage is appended to the list. It is also
            passed on to the next stage.

        Map
            If the data from the previous stage is a Pair, it will be inserted into
            the map, and passed on to the next stage.
            If it is not a pair, an exception will be thrown.

        FileHandle
            Data from the previous stage will be written to the handle and passed
            to the next stage.
            An exception will be thrown if the file/process is not open for writing.

        Any other object types an exception will be thrown.

Attributes
    None

Note
    The head of the pipline may be a string with some special notation.
    If the string terminated with a '>', the string is the name or path of
    a file to be opened for reading. If it terminates with a '|' it is a command
    line to be opened for reading.

    Any other stage of the pipe line can have a string begining with a '>' or '>>'
    to open for writing or appending, or a '|' to open a command line for writing.

    "filepath>"  Used at the head of a pipline to read a file
    "proc|"      Used at the head of a pipline to read from a process
    ">filepath"  Used at any pipeline stage (except head) to write a file.
                 The line written is passed to the next stage
    ">>filepath" Used at any pipeline stage (except head) to append to a file.
                 The line written is passed to the next stage
    "|process"   Used at any pipeline stage (except head) to write to a process.
                 The line written is passed to the next stage


Examples
    Read lines of a file into a list
        lst = CreateList[];
        PipeLine["OC_cme.log>", lst];

    Read a list and pass the contents through grep
        PipeLine[lst, "|grep MyPattern"];

    List files in a tar file, pass through grep and print the ouput using Print[]
        PipeLine["tar tvf file.tar | grep MyPattern |", Print];

    List the keys of a map, and write to a file
        PipeLine[map, First, ">keys.txt"];

    This example shows how you can use functions that take multiple arguments by
    binding.
    This reads a file, passes the lines to SubString to truncate, and then passes to
    Print[] to print the truncated line

        PipeLine["logfile.txt>", SubString[_1, 0, 80], Print];

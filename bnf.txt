letter = [a-zA-Z]
DIGITS = [0-9]
INTEGER = ['-' | '+'], {DIGITS}
STRING = '"', {all characters - '"'}, '"'

list = '{', expressionSequence, '}'

identifier = letter, {letter | digit | '_' | variable}

func = identifier, '['
bop = identifier, ['+'|'-'|'*'|'/'|'%']

expression = identifier
            | functionCall
            | lambda
            | expression MULTIPY expression
            | expression DIVIDE expression
            | expression ADD expression
            | expression SUBTRACT expression
            | expression GT expression
            | expression LT expression
            | expression AND expression
            | expression OR expression
            | expression EQUAL expression
            | list
            | number
            | string
            | variable
            | True
            | False
            | None

expressionSequence = expression, {',', expression}
identifierSequence = identifier, {',', identifier}
functionBody = '[', expression, ']'
functionCall = identifier, '[', expressionSequence, ']'
lambda = '&', '[', identifierSequence, ']''[', expressionSequence, ']'

assignment = identifier, '=', (variable | string | number | functionCall)
           | identifier, '[', (identifier | '_'), {',' (identifier | '_'}, ']', '=', identifier  # function bind
           | identifier, '[', identifierSequence, ']', '=', functionBody
